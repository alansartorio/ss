.PHONY: help
.DEFAULT_GOAL := help

CARGO_HOME := /usr/src/myapp/cargo_home
WORKDIR := /usr/src/myapp
DOCKER_IMG := rustlang/rust:nightly-slim

INPUT_FILE_PATH := TP1/data/input.txt
OUTPUT_FILE_PATH := TP1/data/output.txt
MODE := RELEASE
ifeq "$(MODE)" "RELEASE"
	TARGET_DIR := ./target/release
	BUILD_FLAG := --release
else
	TARGET_DIR := ./target/debug
	BUILD_FLAG := 
endif
PACKAGE := 

#ARGS := --output /dev/stdout --cyclic
BIN :=
ARGS :=
USE_DOCKER := TRUE
ifeq "$(USE_DOCKER)" "TRUE"
	DOCKER_PREFIX := docker run --rm -it --user "$(shell id -u):$(shell id -g)" -e CARGO_HOME=$(CARGO_HOME) -v "$(PWD)":$(WORKDIR) -w $(WORKDIR) $(DOCKER_IMG)
else
	DOCKER_PREFIX := 
endif

help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

build: ## Build all the binaries
	$(DOCKER_PREFIX) cargo build $(if $(PACKAGE),--package $(PACKAGE)) --all-targets $(BUILD_FLAG)

run:
	$(DOCKER_PREFIX) cargo run $(if $(PACKAGE),--package $(PACKAGE)) $(if $(BIN),--bin $(BIN)) $(BUILD_FLAG) -- $(ARGS)

run-impl: ## Run the implementation binary. Usage: make run-impl [INPUT_FILE_PATH="file/path" | ARGS="--help"]
	$(TARGET_DIR)/cim-implementation --input $(INPUT_FILE_PATH) $(ARGS)

run-viz: ## Run the visualization binary. Usage: make run-viz [INPUT_FILE_PATH="file/path" | OUTPUT_FILE_PATH="file/path"]
	$(TARGET_DIR)/visualization --input $(INPUT_FILE_PATH) --output $(OUTPUT_FILE_PATH)
